from collections.abc import Callable

def GaussianQuadrature(f: Callable[[float], float], a: float, b: float, n: int) -> float:
    cs = {
    1: [2.0000000000],
    2: [1.0000000000, 1.0000000000],
    3: [0.8888888889, 0.5555555556, 0.5555555556],
    4: [0.6521451549, 0.6521451549, 0.3478548451, 0.3478548451],
    5: [0.5688888889, 0.4786286705, 0.4786286705, 0.2369268851, 0.2369268851],
    6: [0.3607615730, 0.3607615730, 0.4679139346, 0.4679139346, 0.1713244924, 0.1713244924],
    7: [0.4179591836, 0.3818300505, 0.3818300505, 0.2797053915, 0.2797053915, 0.1294849662, 0.1294849662]
    }
    
    xs = {
    1: [0.0000000000],
    2: [0.5773502692, -0.5773502692],
    3: [0.0000000000, -0.7745966692, 0.7745966692],
    4: [0.3399810436, -0.3399810436, -0.8611363116, 0.8611363116],
    5: [0.0000000000, 0.5384693101, -0.5384693101, -0.9061798459, 0.9061798459],
    6: [0.3607615730, 0.3607615730, 0.4679139346, 0.4679139346, 0.1713244924, 0.1713244924],
    7: [0.0000000000, -0.4058451514, 0.4058451514, -0.7415311856, 0.7415311856, -0.9491079123, 0.9491079123]
    }
    
    A = 0.0
    a0 = b + a
    a1 = b - a
    for (c, x) in zip(cs[n], xs[n]):
        A = A + c * f(0.5 * (a0 + a1 * x))
    A = A * 0.5 * a1
    return A

if __name__ == '__main__':
    from math import exp 
    def f(x: float) -> float: return exp(-x**2)
    A = GaussianQuadrature(f, a=0, b=1, n=7)
    print(f'A = {A:.12f}')